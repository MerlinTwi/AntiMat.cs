using System;
using System.Collections.Generic;
using System.Text;

namespace Client.Chat {

	public class AntimatRu : IAntimat
	{
		
		/// <summary>
		/// На что заменять матерные слова
		/// </summary>
		public readonly string Censored;

		/// <summary>
		/// По какому шаблону была последняя замена (используется при анализе ложных срабатываний)
		/// </summary>
		public string LastUsedPattern { get; private set; }

		private readonly List<WordSplit> _tmpWordSplits;
		private readonly StringBuilder _sb, _sb2;
		
		/// <summary>
		/// Заменает в тексте мат и оскобления
		/// </summary>
		/// <param name="text">обрабатываемый текст</param>
		/// <returns>обработанный текст</returns>
		public string RemoveMat(string text) {
			if (string.IsNullOrEmpty(text))
				return text;

			int textLength = text.Length;
			if (textLength > 0xFFFF)
				throw new Exception("Very long text");

			_tmpWordSplits.Clear();
			_sb.Length = 0;
			_sb2.Length = 0;
			char lastCh = ' ';
			int wordStartIndex = 0, len = 0, pretext = 0, repeatCount = 0;
			bool newWord = true;
				
			for (int i = 0; i < textLength; i++) {
				char ch;
				if (_repl.TryGetValue(text[i], out ch)) { // слово продолжается
					if (ch == '*') continue; // такие разделители не прерывают слово
					_sb2.Append(ch);
					if (ch == lastCh) { // все дублирования смысловых букв убираем
						repeatCount++; // число повторений
						continue;
					}
					if (newWord) { // слово только началось
						wordStartIndex = i;
						pretext = 0;
						newWord = false;
					}
					_sb.Append(ch);
					len++;
				} else if (!newWord) { // закончилось слово
					// только если оно было длиннее 2-х букв, оставляем его
					// или разделитель цифры|англ.буквы
					// иначе плюсуем к следующему
					int j = text[i];
					if (len > 2 // только слова более двух букв
						// если после слова из менее двух букв идут цифры или англ. буквы, то его тоже сохраняем
						// чтобы не слилось с последующим
						|| (j >= 0x30 && j <= 0x39) // цифры
						|| (j == 0x5D/*]*/) // в [скобках] у нас ники там бывают сложные окончания, которые могут пристыковаться к след. слову
						|| (j >= 0x41 && j <= 0x5A) || (j >= 0x61 && j <= 0x7A) // англ.буквы
						|| (repeatCount == 1 && lastCh == 'е') // "её" сокращается до "е" и получается много ошибок "е" + "бал|бан|бу..."
					) { // сохраняем слово
						_tmpWordSplits.Add(new WordSplit {
							Begin = wordStartIndex,
							End = i,
							PretextLen = pretext,
							Word = _sb.ToString(),
							Word2 = _sb2.ToString()
						});
						_sb.Length = 0;
						_sb2.Length = 0;
						newWord = true;
					} else { // запомним длину союзов
						pretext = _sb.Length;
					}
					len = 0; // обнуляем и для <=2-х буквенных, чтобы не перывалась цепочка "е б а*л"
					repeatCount = 0;
				}
				lastCh = ch;
			}
			if (_sb.Length > 0)
				_tmpWordSplits.Add(new WordSplit {
					Begin = wordStartIndex,
					End = textLength,
					PretextLen = pretext,
					Word = _sb.ToString(),
					Word2 = _sb2.ToString()
				});

			for (int index = _tmpWordSplits.Count - 1; index >= 0; index--) {
				// движемся с конца в начало, иначе у нас индексы сместятся при замене текста
				var ws = _tmpWordSplits[index];
				var s = ws.Word;
				int wordLen = s.Length;
				if (wordLen <= 1)
					continue;
				//Console.WriteLine("word: "+s);
				foreach (var pair in _abusivePatterns) { // проверяем подстроку "s" на все шаблоны
					int i, patternLen = pair.Key.Length;
					if (wordLen >= patternLen && (i = s.IndexOf(pair.Key, StringComparison.Ordinal)) >= 0) {
						bool normalText = false;
						var exclusions = pair.Value;
						if (exclusions != null) { // проверяем исключения
							// что было перед и после "w", чтобы проверить по исключениям
							string wordBegin = s.Substring(0, i);
							string wordEnd = s.Substring(i + patternLen);
							for (int c = 0; c < exclusions.Length && !normalText; c++) {
								var exclusion = exclusions[c];
								switch (exclusion.Type) {
									case ExclusionType.Equal:
										if ((i != 0 && i != ws.PretextLen) || wordEnd.Length != 0 ||
											(exclusion.Pattern != null && ws.Word2 != exclusion.Pattern))
											normalText = true;
										break;
									case ExclusionType.Before:
										if (wordBegin.EndsWith(exclusion.Pattern))
											normalText = true;
										break;
									case ExclusionType.After:
										if (wordEnd.StartsWith(exclusion.Pattern))
											normalText = true;
										break;
									default:
										throw new ArgumentOutOfRangeException();
								}
							}
						}
						if (!normalText) { // это мат, помечаем
							LastUsedPattern = pair.Key;
							var newSubstring = Censored ??
											   "<" + text.Substring(ws.Begin, ws.End - ws.Begin).ToUpper() + ">";
							text = text.Substring(0, ws.Begin) + newSubstring + text.Substring(ws.End);
							break; // текст заменили, остальные правила не проверяем
						}
					}
				}
			}
			
			return text;
		}
		
		/// <summary>
		/// Проверяет правила на корректность, чтобы не было повторений, заменяемых букв и т.п.
		/// </summary>
		/// <returns>Сообщения об ошибках или null</returns>
		public string CheckRules() {
			var errors = new List<string>();
			foreach (var ws in AbusivePatterns) {
				var s = ws[0];
				if (s.Length < 2) {
					errors.Add("\"" + s + "\" Слишком короткий шаблон");
				}

				// проверим, чтобы шаблон не содержал заменяемые буквы
				for (int i = 0; i < s.Length; i++) {
					char ch;
					if (_repl.TryGetValue(s[i], out ch) && ch != s[i])
						errors.Add("\"" + s + "\" некорректный символ \"" + s[i] + "\" -> \"" + ch + "\"");
				}

				// проверим, чтобы не было некорректных правил
				for (int i = 1; i < ws.Length; i++) {
					var rule = ws[i];
					if (rule != null) {
						var ch = rule[0];
						if (ch != '<' && ch != '>' && ch != '*' && ch != 'n')
							errors.Add("\"" + s + "\" правило \"" + rule + "\" начинается с неизвестной команды");
					} else {
						errors.Add("\"" + s + "\" содержит пустое правило");
					}
				}

				// проверим, чтобы этот шаблон не был частью другого
				foreach (var w in AbusivePatterns) 
					if (s != w[0] &&
						(s.IndexOf(w[0], StringComparison.Ordinal) >= 0 || w[0].IndexOf(s, StringComparison.Ordinal) >= 0) &&
						(w.Length < 2 || w[1][0] != '*') &&
						(ws.Length < 2 || ws[1][0] != '*'))
					{
						errors.Add("\"" + s + "\" дублирующиеся шаблоны \"" + w[0] + "\"");
					}
			}
			return (errors.Count > 0 ?  string.Join("\n", errors.ToArray()) : null);
		}


		/// <summary>
		/// Удаление рускоязычного мата из текста
		/// </summary>
		/// <param name="censored">
		/// на что заменять матерные слова
		/// если null, то мат выделяется БОЛЬШИМИ буквами (режим модератора чата)
		/// </param>
		public AntimatRu(string censored = "<вц>") {
			Censored = censored;
			_tmpWordSplits = new List<WordSplit>(64);
			_sb = new StringBuilder();
			_sb2 = new StringBuilder();
			if (_repl == null) {
				_repl = new Dictionary<char, char>();
				int textLength = Repl1.Length;
				for (int i = 0; i < textLength; i++)
					_repl.Add(Repl1[i], Repl2[i]);
			}
			if (_abusivePatterns == null) {
				_abusivePatterns = new Dictionary<string, Exclusion[]>();
				foreach (var pattern in AbusivePatterns) {
					var key = pattern[0];
					List<Exclusion> exclusions = null;
					for (int i = 1; i < pattern.Length; i++) {
						var s = pattern[i];
						ExclusionType type;
						switch (s[0]) {
							case '<':
								type = ExclusionType.Before;
								break;
							case '>':
								type = ExclusionType.After;
								break;
							case '*':
								type = ExclusionType.Equal;
								break;
							default:
								throw new Exception("Wrong rule: "+s);
						}
						if (exclusions == null)
							exclusions = new List<Exclusion>();
						exclusions.Add(new Exclusion(type, s.Length > 1 ? s.Substring(1) : null));
					}
					_abusivePatterns.Add(key, exclusions == null ? null : exclusions.ToArray());
				}
			}
		}

		//- PRIVATE -----------------------------------------------------------------------------------------------

		private struct WordSplit
		{
			public int Begin;
			public int End;
			public int PretextLen;
			public string Word;
			public string Word2;
		}

		private enum ExclusionType
		{
			Equal,
			Before,
			After,
		}

		private class Exclusion
		{
			public readonly ExclusionType Type;
			public readonly string Pattern;
			public Exclusion(ExclusionType type, string pattern) {
				Type = type;
				Pattern = pattern;
			}
		}
		
		/** замены символов */
		private const string Repl1 = "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЬЫЪЭЮЯЁACEKMOXYPTDHBабвгдежзийклмнопрстуфхцчшщьыъэюяёacekmoxyptfdszuiіЇї04963_-–+*";
		private const string Repl2 = "абвгдежзийклмнопрстуфхцчшщьыьэюяеасекмохуртднвабвгдежзийклмнопрстуфхцчшщьыьэюяеасекмохуртфдсзиииииочябз*****";
		private static Dictionary<char, char> _repl;
		private static Dictionary<string, Exclusion[]> _abusivePatterns;

		/// <summary>
		/// Правила для матерных слов:
		/// [Часть матерного или оскорбительного слова, массив правил для исключений ...], где
		/// первый символ управляющий:
		///     &lt; - прямо перед шаблоном не должно быть ...
		///     &gt; - сразу за шаблоном не должно быть ...
		///     * - слово строго совпадает с шаблоном
		///     *Слово - слово без игнорирования повторений строго совпадает с шаблоном
		///     null или не указано - удалять без исключений
		/// </summary>
		private static readonly string[][] AbusivePatterns = {
			new []{"анал", "*"},
			new []{"анальн", "<к"/*канальный*/, "<б"/*банально*/},
			new []{"блят", "<сугу"/*усугуБЛЯТь*/,"<подо"/*уподоБЛЯТь*/, "<ско"/*скоБЛЯТ*/, "<гра"/*разграБЛЯТь*/,"<зло"/*озлоБЛЯТь*/, "<лю"/*влюблять*/, "<лу"/*заглублять*/, "<ла"/*ослаблять*/, "<тре"/*потреблять*/, "<скор"/*оскорблять*/, "<раздро"/*раздроблят*/, "<осо"/*приспособляться,обособляться*/},
			new []{"блеат"},
			new []{"блеад"},
			new []{"блиат"},
			new []{"блиад"},
			new []{"бляд"},
			new []{"бля", "*"},
			new []{"взьеб"},
			new []{"вьеб"},
			new []{"вжопу"},
			new []{"выбл", ">ен"/*ВЫБЛенка*/},
			new []{"высер", "*"},
			new []{"высрал"},
			new []{"высран"},
			new []{"выродк"},
			new []{"выродок", "*"},
			new []{"вжопе"},
			new []{"гавню"},
			new []{"говно", "<ле"/*Олеговной*/},
			new []{"говню"},
			new []{"говены"}, // говеный
			new []{"говня"}, // говняный
			new []{"гомик"},
			new []{"гомосек", ">суа"/*гомосексуаль**/},
			new []{"гандон", "<пропа"},
			new []{"гондон"},
			new []{"гнида"},
			new []{"даун", "*"}, // ДАУН-хаус, ДАУН-синдром, дауненок (ребенок с синдромом дауна), нокДАУН
			new []{"дерьмо"},
			new []{"дроч", ">ена"/*Дрочёна — (также драчёна)  полузабытое блюдо русской кухни из яиц*/, ">ист"/*гидроочистка*/},
			new []{"дрюч"},
			new []{"дибил", "<бо"/*боДИБИЛдер*/},
			new []{"дебил", "<бо", ">ьн"/*дебильная*/},
			new []{"долбаеб"}, // много вариантов "долбаем"
			new []{"долбоеб"},
			new []{"далбае"},
			new []{"далбое"},
			new []{"дуроеб"},
			new []{"ебтвою"},
			new []{"жыд"},
			new []{"залуп", ">и"/*залупил*/,">лю",">ог"/*за лупоглазиками*/,">ящ"/*за лупящей*/,">ят"/*как залупят*/},
			new []{"засран"},
			new []{"заеб"},
			new []{"заднеприводный"},
			new []{"защекан"},
			new []{"зигхай"}, // зиг-хайль
			new []{"еб", "*"},
			new []{"еба", "*"},
			new []{"ебал", "<ш"/*шЕБАЛина,шЕБАЛинец*/, "<пер"/*перЕБАЛ...*/, ">ет"/*кордЕБАЛет*/, ">аб"/*не балабол*/,"<кол"/*колЕБАЛ*/, "<хл"/*хлЕБАЛ*/, "<скр"/*выскрЕБАЛ*/, ">тыва"/*перебалтывал*/, "<гр"/*выгрЕБАЛ*/, "<н"/*"не"+любое слово на "бал": нЕ БАЛьное*/, "<ж"/*"же"+любое слово на "бал": такой же БАЛ*/},
			new []{"ебат", "<скр"/*соскрЕБАТь*/, "<кол"/*заколЕБАТь*/,"<д"/*дебаты*/, "<ст"/*стЕБАТься*/, "<гр"/*загрЕБАТь*/, "<скр"/*выскрЕБАТь*/, "<хл"/*хлЕБАТь*/, "<н"/*"не"+любое слово на "бат": нЕ БАТаталия*/, "<ж"/*"же"+*/},
			new []{"ебет", "<щ"/*щЕБЕТ*/,"<скр"/*скрЕБЕТ*/,"<л"/*ЛЕБЕТКА*/,"<гр","<д", "<хр", ">ипа"/*тебетипа*/, "<н"/*"не"+любое слово на "бет": нЕ БЕТа*/, "<ж"/*"же"+*/},
			new []{"ебись", "<скр"/*скребись*/},
			new []{"еблан", "<н"/*"не"+любое слово на "блан": нЕ БЛАНк*/, "<ж"/*"же"+*/},
			new []{"ебан", "<хл"/*хлЕБАНие*/, "<ик"/*икЕБАНа*/, "<гр", "<кол", "<скр"/*выскрЕБАНие*/, "<вн"/*внЕБАНковск*/, ">к"/*дойчЕБАНк*/, "<н"/*"не"+любое слово на "бан": нЕ БАНально*/, "<ж"/*"же"+*/, "<эст"/*Эстебан*/, "<ч"/*чебан*/, ">алит"/*веб-аналитик*/},
			new []{"ебен", "<цел"/*целЕБЕН*/, "<хл"/*хлЕБЕНное*/, ">евк"/*тЕБЕНёвка*/,"<мол"/*молЕБЕН*/, "<щ"/*щебень*/, "<р"/*рЕБЕНок*/,"<лш"/*волшЕБЕН*/,"<жд"/*враждЕБЕН*/, "<н"/*"не"+любое слово на "бен": нЕ БЕНгальский*/, "<ж"/*"же"+*/, "<тотл"/*Тотлебен*/},
			new []{"ебеш", "<пер"/*перЕБЕШусь*/,"<кр"/*скрЕБЕШь*/,"<гр"/*грЕБЕШь*/, "<н"/*"не"+любое слово на "беш": нЕ БЕШеный*/, "<ж"/*"же"+*/},
			new []{"ебло", "<скр"/*скрЕБЛО*/, "<гр", ">к"/*дЕБЛОкада,дЕБЛОкировка*/, "<н"/*"не"+любое слово на "бло": нЕ БЛОк*/, "<ж"/*"же"+*/},
			new []{"ебнут", "<хл"/*захлЕБНУТся*/}, // у "ебну" очень много исключеий
			new []{"ебнул", "<хл"/*хлЕБНУЛи*/},
			new []{"ебля", "<ст"/*стЕБЛЯх*/, "<потр"/*потреблять*/, "<стр"/*истреблять*/, "<гр"/*грЕБЛЯ*/, "<кол"/*колЕБЛЯ*/, "<н"/*"не"+*/, "<ж"/*"же"+*/},
			new []{"ебли", "<пер"/*пере-бли...*/, "<ст"/*стЕБЛИ*/, "<служ"/*служЕБЛИ*/, "<кр"/*отскрЕБЛИ*/, "<нст"/*констЕБЛИ*/, "<м"/*мЕБЛИрован*/, "<н"/*"не"+любое слово на "бли": нЕ БЛИзко*/, "<ж"/*"же"+*/, "<гр"/*грЕБЛИ*/, "<кол"/*заколЕБЛИ*/, "<ист"/*истЕБЛИшмент*/},
			new []{"ебош", "<д"/*дЕБОШ*/, "<н"/*"не"+*/, "<ж"/*"же"+*/},
			new []{"ебыр", "<с"/*несебыр*/}, // ебырь
			new []{"ебу", "*"},
			new []{"ебусь", "*"},
			new []{"ебут", "<ш"/*шЕБУТной*/, "<кр"/*отскрЕБУТ*/, "<н"/*"не"+*/, "<ж"/*"же"+*/, "<гр"/*грЕБУТ*/, "<ст"/*стЕБУТься*/},
			new []{"ебуч", "<отч"/*отчЕБУЧить*/, "<н"/*"не"+*/, "<ж"/*"же"+*/},
			new []{"ебушк", "<хл"/*хлебушка*/}, // ебушки
			new []{"выеб"},
			new []{"еби", "*"},
			new []{"жопа"},
			new []{"каловидн", "<о"/*боКАЛОВИдные*/}, // каловидный
			new []{"копрофил", ">ьн"/*низКОПРОФИЛьные,широКОПРОФИЛьные*/, ">ак"/*медиКО-ПРОФИЛактический*/, "<з"/*узКОПРОФИЛьный*/},
			new []{"куколд"},
			new []{"лох", "*"},
			new []{"матьтвою"},
			new []{"манда", "<ко", ">рин", "<а", ">т"/*МАНДАт*/, ">нт"/*МАНДАнт*/, ">лай"/*Мандалай*/, "<ар"/*Арманда*/},
			new []{"манду", "<ко", "<а", "<кат"/*катманду*/, "<ар"/*Арманду*/},
			new []{"мандо", "<ко", "<а", ">рин", ">л"/*МАНДОлина*/, "<ар"/*Армандо*/},
			new []{"минет", "*"}, // любое слово заканчивающееся на "ми" и следом "нет"
			new []{"миньет"},
			new []{"мразь"},
			// new []{"мраз", // есть фамилия "МРАЗ" и "в 5-м разе"},
			new []{"муда", "<мах"/*махМУДА*/, "<тал"/*талМУДА*/, ">рь"/*аМУДАрья*/, "<бер"/*Бермудах*/},
			new []{"мудил"},
			new []{"мудо", "<тал"/*талМУДОв*/, "<мах"/*махМУДОм*/, "<бер"/*Бермудовый*/},
			new []{"нах", "*"},
			new []{"нунах", "<ка"/*канунах*/},
			new []{"нех", "*"},
			new []{"наебну"},
			new []{"насрал"},
			new []{"нахер", ">увим"/*на херувиме*/, ">сонс"/*на херсонск*/},
			new []{"нахую"},
			new []{"разьеба"},
			new []{"обосал", ">ив"/*ОБ ОСАЛивании*/}, // "обоса" нельзя, ложные срабатывания: "пО БОСАм", "мозгОБОССА"
			new []{"обосаны"}, // "обосан" низя - много вариантов ОБ ОСАНке
			new []{"обьеб"}, // объебал
			new []{"обоср"}, // обосрал
			new []{"отсосал"},
			new []{"отсоси", ">ск"/*от сосиски*/, ">со"/*от сосисок, от сосисочной*/},
			new []{"отьеб"},
			new []{"падла", "*"},
			new []{"падлы", "*"},
			new []{"педик", ">юр", ">ул"/*ПЕДИКулез*/},
			new []{"педофил", ">и"}, /*про педофилИЮ*/
			new []{"педорас"},
			new []{"пердол"}, /*пердолить*/
			new []{"педри"},
			new []{"пидар", "<ски", "<ла"/*лаПИДАРно*/},
			new []{"пидер", "<э"/*эПИДЕРма*/},
			new []{"пидр", "<э"/*эПИДРасследование*/},
			new []{"пидор"},
			new []{"пздц"},
			new []{"пизд"},
			new []{"пезд"},
			new []{"писд"},
			new []{"подьеб"},
			new []{"пох", "*"},
			new []{"поц", "*"},
			new []{"похую"},
			new []{"пнх"},
			new []{"ризда", "*"}, // pizda - у нас анг. пэ интерпретируется как эр /*редактоР-ИЗДАтель*/
			new []{"санина", "*ссанина"}, // ссанина - Есть фамилия Санина
			new []{"саси", "*"},
			new []{"су", "*ссу"}, // ссу
			new []{"сать", "*"}, // ссать
			new []{"соси", "*"},
			new []{"спермо", "<эндо"/*эндоспермой*/},
			new []{"сперму"},
			new []{"стерва", "*"}, //стервец, стервозная, ">ен"/*оСТЕРВенев*/, ">ятн"/*СТЕРВятник*/
			new []{"срака", "*"}, // С РАКАми
			new []{"сраки", ">т"/*С РАКИтной*/},
			new []{"сруль", "*"}, // с рулькой
			new []{"срут", "*"},
			new []{"сыкун"},
			new []{"сыкло"},
			new []{"сыкуха"},
			new []{"сосуно"},
			new []{"сперма", "*"},
			new []{"сраная"},
			new []{"срань", "*"},
			new []{"сука", "*"}, // с указанием, с указательным, с указами, С УКАтанных, С УКАзчиком, С УКАзующим, С УКАзкой, ...
			new []{"сукаь"},
			new []{"суки", "<бар"},
			new []{"суко", "*"}, // СУКОм, СУКОватость, СУКОнная, с укором, С УКОризной, С УКОренившихся, С УКОрачивающей, с уколом,
			new []{"сучен", ">ие"/*СУЧЕние*/, "<бар", ">ия"/*с учения*/, ">ич", ">иц", ">ик", ">ий", ">ье"/*с ученьем*/, ">ых"/*с ученых*/, ">ым"/*с учеными*/}, // "суче" много исключений
			// "СУЧИ лапками" // new []{"сучи", "<бар", "<в", ">ва"/*выСУЧИвать*/, "<за"/*заСУЧИл*/},
			new []{"сучар"},
			new []{"сцука", ">тами"/*С ЦУКАтами*/},
			new []{"сцуки"},
			new []{"сцуко"},
			new []{"сцыку"},
			new []{"сышь", "*"},
			new []{"траход"}, // траходром
			new []{"траха", "<ас"/*асТРАХАни*/, "<с"/*страха*/, ">тлу"/*оТ РАХАт-лукума*/},
			new []{"ублюдок", "*"}, // "у блюда"
			new []{"ублюдки", "*"},
			new []{"уеба"},
			new []{"уеби"},
			new []{"уебу"},
			new []{"уебни"},
			new []{"уебок"},
			new []{"угробищ"},
			new []{"урод", "*"},
			new []{"уебыш"},
			new []{"членосос"},
			new []{"целка"},
			new []{"целки"},
			new []{"чернож", ">ел"/*черножелтый*/},
			new []{"похер", ">увим"/*по херувиму*/, ">сонс"/*по херсонской*/},
			new []{"пердун"},
			new []{"шалав"},
			new []{"шлюх"},
			new []{"чмо", "*"},
			new []{"чмошн"},
			new []{"уебк"},
			new []{"уебыв"},
			new []{"хайль", ">б"/*ХАЙЛЬбронн*/, ">м"/*ХАЙЛЬман*/}, // зиг хайль
			new []{"хер", "*"},
			new []{"хереть"}, // ахереть
			new []{"херел"}, // охерел?
			new []{"хренел"}, // ахренел?
			new []{"хренет"}, // ахренеть
			new []{"хрен", "*"},
			new []{"хуе", ">д"/*ах уеду*/, ">ха"/*ах уехал*/, ">зж"/*ах уезжайте*/, "<ша"/*шаХУЕт*/,">шь"/*сХУЕшь*/,"<пло"/*сплоХУЕм*/, "<пси"/*псиХУЕм*/, "<стра"/*застраХУЕм*/},
			new []{"хуи", ">мблд"/*ах уимблдонский*/},
			new []{"хуй", "<ша"/*шаХУЙ*/,"<с"/*сХУЙся*/,"<пло","<пла",/*сплоХУЕм*/ "<стра", "<штри", "<пси"},
			new []{"хуя", "<ша"/*шаХУЯ*/,"<пло","<пла",/*сплоХУЯ*/ "<стра", "<штри", "<пси", ">звлен"/*ах уязвлен*/, ">звим"/*ох уязвимое*/},
			new []{"хуле", "*"},
			new []{"ахули", "*"},
			new []{"хули", "*"},
			new []{"хуль", "*"},
			new []{"фиск", "*"}, // fuck
		};

	}
}